$date
	Tue Jan 21 13:58:09 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module FourBCDTB $end
$var wire 1 ! Clk $end
$var wire 1 " Reset $end
$var wire 4 # Trigger [3:0] $end
$var wire 16 $ DataOut [15:0] $end
$scope module FourBCDInst $end
$var wire 1 ! Clk $end
$var wire 1 " Reset $end
$var wire 4 % Trigger [3:0] $end
$var wire 1 & carry4 $end
$var wire 1 ' carry3 $end
$var wire 1 ( carry2 $end
$var wire 1 ) carry1 $end
$var wire 16 * DataOut [15:0] $end
$scope module digit0 $end
$var wire 1 + Cin $end
$var wire 1 ! Clk $end
$var wire 1 " Reset $end
$var wire 1 , Trigger $end
$var wire 4 - DataOut [3:0] $end
$var wire 1 ) Cout $end
$var reg 1 ) cout $end
$var reg 4 . dataOut [3:0] $end
$var reg 4 / increment [3:0] $end
$upscope $end
$scope module digit1 $end
$var wire 1 ) Cin $end
$var wire 1 ! Clk $end
$var wire 1 " Reset $end
$var wire 1 0 Trigger $end
$var wire 4 1 DataOut [3:0] $end
$var wire 1 ( Cout $end
$var reg 1 ( cout $end
$var reg 4 2 dataOut [3:0] $end
$var reg 4 3 increment [3:0] $end
$upscope $end
$scope module digit2 $end
$var wire 1 ( Cin $end
$var wire 1 ! Clk $end
$var wire 1 " Reset $end
$var wire 1 4 Trigger $end
$var wire 4 5 DataOut [3:0] $end
$var wire 1 ' Cout $end
$var reg 1 ' cout $end
$var reg 4 6 dataOut [3:0] $end
$var reg 4 7 increment [3:0] $end
$upscope $end
$scope module digit3 $end
$var wire 1 ' Cin $end
$var wire 1 ! Clk $end
$var wire 1 & Cout $end
$var wire 1 " Reset $end
$var wire 1 8 Trigger $end
$var wire 4 9 DataOut [3:0] $end
$var reg 1 : cout $end
$var reg 4 ; dataOut [3:0] $end
$var reg 4 < increment [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 <
bx ;
0:
bx 9
08
b0 7
bx 6
bx 5
04
b0 3
bx 2
bx 1
00
b0 /
bx .
bx -
0,
0+
bx *
0)
0(
0'
0&
b0 %
bx $
b0 #
0"
1!
$end
#500
0!
#1000
1!
#1200
1"
#1500
0!
#2000
b0 -
b0 .
b0 1
b0 2
b0 5
b0 6
b0 $
b0 *
b0 9
b0 ;
1!
#2200
b1 3
b1 7
b1 <
b1 /
10
14
18
1,
b1111 #
b1111 %
0"
#2500
0!
#3000
b1 9
b1 ;
b1 5
b1 6
b1 1
b1 2
b1000100010001 $
b1000100010001 *
b1 -
b1 .
1!
#3500
0!
#4000
b10 -
b10 .
b10 1
b10 2
b10 5
b10 6
b10001000100010 $
b10001000100010 *
b10 9
b10 ;
1!
#4500
0!
#5000
b11 9
b11 ;
b11 5
b11 6
b11 1
b11 2
b11001100110011 $
b11001100110011 *
b11 -
b11 .
1!
#5500
0!
#6000
b100 -
b100 .
b100 1
b100 2
b100 5
b100 6
b100010001000100 $
b100010001000100 *
b100 9
b100 ;
1!
#6500
0!
#7000
b101 9
b101 ;
b101 5
b101 6
b101 1
b101 2
b101010101010101 $
b101010101010101 *
b101 -
b101 .
1!
#7500
0!
#8000
b110 -
b110 .
b110 1
b110 2
b110 5
b110 6
b110011001100110 $
b110011001100110 *
b110 9
b110 ;
1!
#8500
0!
#9000
b111 9
b111 ;
b111 5
b111 6
b111 1
b111 2
b111011101110111 $
b111011101110111 *
b111 -
b111 .
1!
#9500
0!
#10000
b1000 -
b1000 .
b1000 1
b1000 2
b1000 5
b1000 6
b1000100010001000 $
b1000100010001000 *
b1000 9
b1000 ;
1!
#10500
0!
#11000
1&
1:
b10 <
1'
b10 7
1(
b10 3
1)
b1001 9
b1001 ;
b1001 5
b1001 6
b1001 1
b1001 2
b1001100110011001 $
b1001100110011001 *
b1001 -
b1001 .
1!
#11500
0!
#12000
b1 3
b1 7
b1 <
0)
b0 -
b0 .
0(
b1 1
b1 2
0'
b1 5
b1 6
0&
0:
b1000100010000 $
b1000100010000 *
b1 9
b1 ;
1!
#12201
